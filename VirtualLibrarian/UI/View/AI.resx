<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.InitialImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        8U0T+B9ZZ+ku8Z/toQAAAABJRU5ErkJggg==
</value>
  </data>
</root>